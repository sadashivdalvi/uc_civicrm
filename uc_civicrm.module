<?php

/**
 * @file
 * Module to integrate Ubercart with CiviCRM.
 */

/**
 * Implementation of hook_help().
 */
function uc_civicrm_help($path = 'admin/help#uc_civicrm') {
  if (!module_exists('civicrm')) { return; }
  switch ($path) {
    case 'admin/help#uc_civicrm':
      return t('This module integrates Ubercart with CiviCRM. When a customer buys something from the store, the name and address information they provide is added to CiviCRM. Existing contact records will be updated. The new or updated contact is added to a group, activity history record of type \'Purchase\' is added to the contact\'s history and the \'Purchases\' tab on the contact\'s dashboard is populated with a link to their order history.');
  }
}


/**
 * Implementation of hook_civicrm_tabs().
 */
function uc_civicrm_civicrm_tabs(&$tabs, $cid) {
  if (!civicrm_initialize()) { return; }
  $uid = CRM_Core_BAO_UFMatch::getUFId($cid);
  if (empty($uid)) { return; }

  $history = uc_civicrm_contact_transaction($uid, FALSE);
  $count = count($history['orders']['#rows']);

  $tab = array(
    'id'     => 'purchases',
    'title'  => t('Purchases'),
    'count'  => $count,
    'weight' => 99,
  );

  if ($count > 0) { $tab['url'] = url("admin/store/civicrm/customer/orders/$uid"); }
  $tabs[] = $tab;

  return $tabs;
}


/**
 * Implementation of hook_menu().
 */
function uc_civicrm_menu() {
  if (!module_exists('civicrm')) { return; }

  $items = array();
  $items['admin/store/civicrm/customer/orders/%'] = array(
    'title'            => 'CiviCRM',
    'page callback'    => 'uc_civicrm_contact_transaction',
    'page arguments'   => array(5),
    'access arguments' => array('administer CiviCRM'),
    'type'             => MENU_CALLBACK,
  );

  $items['admin/settings/uc_civicrm_menu'] = array(
    'title' => 'Ubercart/CiviCRM',
    'description' => 'Configuration options for Ubercart/CiviCRM integration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_civicrm_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}


/**
 * Callback to expose order information in a CiviCRM tab.
 *
 * @param $uid
 *   Drupal UID for the customer
 */
function uc_civicrm_contact_transaction($uid, $snippet = TRUE) {
  if (!module_exists('civicrm') || is_null($uid)) { return; }
  if (!civicrm_initialize()) { return; }

  $output = _uc_civicrm_customer_orders($uid);
  if ($snippet) { print render($output); }
  else { return $output; }
  return;
}


/**
 *  Admin form configuration.
 */
function uc_civicrm_admin() {
  if (!module_exists('civicrm')) { return; }
  if (!civicrm_initialize()) { return; }
  require_once 'api/v2/Group.php';
  require_once 'CRM/Core/Config.php';
  $params = array();
  $groups = civicrm_group_get($params);

  $options = array();
  foreach ($groups as $group) { $options[$group['id']] = $group['title']; }
//Modified by BOT - 1st July, 2013
  natsort($options);

  // Get contribution types
  $sql = "SELECT id, name FROM civicrm_financial_type WHERE is_active = 1";
  $dao =& CRM_Core_DAO::executeQuery($sql, array());
  $types = array(0 => "Select a type...");
  while ($dao->fetch()) { $types[$dao->id] = $dao->name; }

  $form = array();
  $form['uc_civicrm_contribution_type'] = array(
    '#type' => 'select',
    '#title' => t('Contribution type'),
    '#default_value' => variable_get('uc_civicrm_contribution_type', array()),
    '#options' => $types,
    '#description' => t('Select a contribution type for purchases, making a new type with a name like "Ubercart purchase" is recommended.'),
  );

  $form['uc_civicrm_groups'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Groups to add purchasers to'),
    '#default_value' => variable_get('uc_civicrm_groups', array()),
    '#options' => $options,
    '#description' => t('Check to add purchasers to the selected groups')
  );

  return system_settings_form($form);
}


/**
 * Called when the an order is created or changed. Creates a new order or
 * updates an existing one.
 *
 * @param $order
 *   the order
 * @param $is_new boolean
 *   TRUE if it's a new order
 */
function uc_civicrm_action_order_civicrm($order, $is_new = TRUE) {
  global $user;

  if (!module_exists('civicrm')) { return; }
  if (!civicrm_initialize()) { return; }
  if ($is_new) {
    require_once 'CRM/Core/BAO/UFMatch.php';
    require_once 'api/v2/Contact.php';

    // Find or create a CiviCRM contact ID for the customer.
    $cid = _uc_civicrm_get_cid($order);
    if ($cid === FALSE) { return; }

    $cid = _uc_civicrm_add_update_contact($cid, $order);

    if ($cid === FALSE) { return; }

    // add the contribution record
    _uc_civicrm_add_contribution($cid, $order);

    // add this contact to selected groups
    _uc_civicrm_add_to_groups($cid);
  } else {
    require_once 'CRM/Core/Config.php';
    require_once "api/v2/Contribute.php";
    $config =& CRM_Core_Config::singleton();
    $params = array('invoice_id' => $order->order_id . "_uc", 'return.contact_id' => 1, );
    $result =& civicrm_contribution_search($params);
    if (civicrm_error($result)) {
      watchdog('uc_civicrm', 'Error searching for contribution: ' . $result['error_message'], array(), WATCHDOG_ERROR);
    } else {
      $contribution = array_shift($result);
      $params = array(
        'id' => $contribution['contribution_id'],
        'contact_id' => $contribution['contact_id'],
        'contribution_status_id' => _uc_civicrm_map_contribution_status($order->order_status),
      );
      $result =& civicrm_contribution_add($params);

      // @TODO There is a very odd issue here, evidently the system works,
      // but there are times when this fires before a contribution has been added.
      if (civicrm_error ($result)) {
        watchdog('uc_civicrm', 'Error updating contribution: ' . $result['error_message'], array(), WATCHDOG_ERROR);
      }
    }
  }
}


/**
 * Add contact to any specified groups.
 *
 * @param $contact
 *   CRM_Contact_BAO_Group object describing the contact to add
 */
function _uc_civicrm_add_to_groups($cid) {
  require_once 'api/v2/GroupContact.php';

  // No groups specified
  $groups = variable_get('uc_civicrm_groups', '');
  if ($groups == '') { return; }

  foreach ($groups as $id => $key) {
    if ($key != 0) {
      $params = array('contact_id' => $cid, 'group_id' => $key);
      $result = civicrm_group_contact_add($params);
      if (!empty($result['is_error'])) {
        watchdog('uc_civicrm', 'Error adding contact to group: ' . $result['error_message'], array(), WATCHDOG_ERROR);
      }
    }
  }
}


/**
 * Get contact id for the customer.
 *
 * @param $order
 *   Order
 * @return
 *   false|integer false   => an error occured
 *                 integer => CID if non-zero; must create if zero
 */
function _uc_civicrm_get_cid($order) {
  if ($order->uid != 0) {
    $match = CRM_Core_BAO_UFMatch::synchronizeUFMatch($user, $order->uid, $order->primary_email, 'Drupal', FALSE, 'Individual');
    if (!is_object($match)) { return FALSE; }
    return $match->contact_id;
  }

  // The customer is anonymous.  Look in the CiviCRM contacts table for a
  // contact that matches the primary email.
  $params = array('email' => $order->primary_email, 'return.contact_id' => TRUE);
  $contact = civicrm_contact_search($params);
  if (!empty($contact['is_error'])) {
    watchdog('uc_civicrm', 'civicrm_contact_search(): ' . $contact['error_message'], array(), WATCHDOG_ERROR);

    return FALSE;
  }

  // No matches found, so we will need to create a contact.
  if (count($contact) == 0) { return 0; }
  $cid = array_shift($contact);
  return $cid;
}


/**
 *  Add or update contact information
 */
function _uc_civicrm_add_update_contact($cid, $order) {
  require_once 'api/v2/Location.php';

  $contact = array();

  if ($cid != 0) {
    $params = array('contact_id' => $cid,
      'return.contact_id'        => 1,
      'return.contact_source'    => 1,
	  'return.contact_first_name' =>1,
	  'return.contact_last_name' =>1
    );
    $contact = civicrm_contact_search($params);

    if (!empty($contact['is_error'])) {
      watchdog('uc_civicrm', 'civicrm_contact_search():' . $contact['error_message'], array(), WATCHDOG_ERROR);
      return FALSE;
    }
    $contact = array_shift($contact);
    $contact['contact_id'] = $cid;
    $contact['source']     = $contact['contact_source'];
    unset($contact['contact_source']);
  }

  //Determine if the contact is new - added by bot
    require_once 'CRM/Core/BAO/Log.php';
  $log = new CRM_Core_DAO_Log();
  $log->entity_table = 'civicrm_contact';
  $log->entity_id = $cid;
  $log->orderBy('modified_date asc');
  $log->limit(1);
  $result = CRM_Core_DAO::$_nullObject;
  if ($log->find(TRUE)) {
    $result = array(
        'id' => $log->modified_id,
        'date' => $log->modified_date,
     );
  }
  $date = date('Y-m-d H:i:s');
  $to_time = strtotime($date);
  $from_time = strtotime($result['date']);
  $diff = round(abs($to_time - $from_time) / 60,2). " minute";
  $contactStatus = 'old';
  if ( $diff < 30 ) {
    $contactStatus = 'new';
  }

  $contactParams = array(
    'id' => $cid,
    'version' => 3,
  );

  require_once 'api/api.php';
  $contactInfo = civicrm_api( 'contact','get', $contactParams );
  // Prepare array to update contact via civi API
  // Assume that if there is a delivery name then that is the contact to add
  $fname = '';
  $lname = '';
  if (!empty($order->delivery_last_name) && !empty($order->delivery_first_name)) {
    $fname = $order->delivery_first_name;
    $lname = $order->delivery_last_name;
  } else {
    $fname = $order->billing_first_name;
    $lname = $order->billing_last_name;
  }

  $contact['version'] = 3;
  $contact['sequential'] = 1;
  $contact['last_name'] = $lname;
  $contact['first_name'] = $fname;
  $contact['sort_name'] = "{$lname}, {$fname}";
  $contact['display_name'] = "{$fname} {$lname}";
  $contact['contact_type'] = 'Individual';
  $contact['email'] = $order->primary_email;
  if (empty($contact['source'])) { $contact['source'] = 'Ubercart purchase'; }
  // Create contact or update existing contact
  if ( $contactStatus == 'new' && !$contactInfo['values'][$cid]['first_name'] && !$contactInfo['values'][$cid]['last_name']) {
    $result =  civicrm_api('Contact', 'create', $contact);
if (!empty($result['is_error'])) {
   watchdog('uc_civicrm', 'civicrm_contact_add():' . $rc['error_message'], array(), WATCHDOG_ERROR);
   return FALSE;
 }
}
  // Location
  $loc_types = CRM_Core_PseudoConstant::locationType();

  $uc_billing = array_search( 'Ubercart_Billing', $loc_types);
  $uc_shipping = array_search('Ubercart_Shipping', $loc_types);
  if (!empty($order->delivery_last_name) && !empty($order->delivery_first_name)) {
    $deliveryPhone = array();
    if (!empty($order->delivery_phone)) {
      $deliveryPhone = array(
        'phone' => $order->delivery_phone,
        'phone_type_id' => 1,
        'location_type_id' => $uc_shipping
      );
    }

    $countries = uc_get_country_data(array('country_id' => $order->delivery_country));
    $address = array(
      1 => array(
        'location_type_id'       => $uc_shipping,
        'city'                   => $order->delivery_city,
        'state_province'         => uc_get_zone_code($order->delivery_zone),
        'postal_code'            => $order->delivery_postal_code,
        'street_address'         => $order->delivery_street1,
        'supplemental_address_1' => $order->delivery_street2,
        'country'                => $countries[0]['country_iso_code_2']
      )
    );

    // Delivery Phone
    $phones = array($deliveryPhone);
    $params = array('version' => '3.0', 'contact_id' => $cid, 'phone' => $phones, 'address' => $address);
    $newLocation = civicrm_location_update($params);
    if ($newLocation['is_error'] &&
        strpos($newLocation['error_message'], "Invalid Location Type(s) : Ubercart_Shipping") !== FALSE) {
      $newLocation = civicrm_location_add($params);
    }
    // Log the error, but continue.
    if (civicrm_error($newLocation)) {
      watchdog('uc_civicrm', 'civicrm_location_update(): ' . $newLocation['error_message'], array(), WATCHDOG_ERROR);
    }
  }

  // Billing phone
  $billingPhone = array();
  if (!empty($order->billing_phone)) {
    $billingPhone = array(
      'phone' => $order->billing_phone,
      'is_primary' => FALSE,
      'phone_type_id' => 1,
      'location_type_id' => $uc_billing,
    );
  }

  $countries = uc_get_country_data(array('country_id' => $order->billing_country));
  $address = array(
    1 => array(
      'location_type_id'          => $uc_billing, //Billing', // this assumes the billing address type id == 5
      'city'                   => $order->billing_city,
      'state_province'         => uc_get_zone_code($order->billing_zone),
      'postal_code'            => $order->billing_postal_code,
      'street_address'         => $order->billing_street1,
      'supplemental_address_1' => $order->billing_street2,
      'country'                => $countries[0]['country_iso_code_2']
    )
  );

  $phones = array($billingPhone);
  $params = array('version' => '3.0', 'contact_id' => $cid, 'phone' => $phones, 'address' => $address);
  $newBillingLocation = civicrm_location_update($params);
  if ($newBillingLocation['is_error'] &&
      strpos($newBillingLocation['error_message'], "Invalid Location Type(s) : Ubercart_Billing") !== FALSE) {
    $newBillingLocation = civicrm_location_add($params);
  }
  // Log the error, but continue.
  if (civicrm_error($newBillingLocation)) {
    watchdog('uc_civicrm', 'civicrm_location_update(): ' . $newBillingLocation['error_message'], array(), WATCHDOG_ERROR);
  }

  return $cid;
}


/**
 * Creates required contribution fields if they have not already been created.
 */
function _uc_civicrm_create_custom_contribution_fields() {
  $groupId = variable_get('uc_civicrm_contribution_group_id', FALSE);
  if ($groupId != FALSE) { return; }

  require_once 'CRM/Core/Config.php';
  require_once 'api/v2/CustomGroup.php';
  // First we need to check if the Sales Tax and Shipping custom fields have
  // already been created.
  $params = array(
    'title'            => 'Ubercart Purchases',
    'name'             => 'ubercart_purchases',
    'extends'          => array('Contribution'),
    'weight'           => 1,
    'collapse_display' => 0,
    'is_active'        => 1,
  );
  $customGroup = civicrm_custom_group_create($params);
  variable_set('uc_civicrm_contribution_group_id', $customGroup['id']);

  $params = array(
    'custom_group_id' => $customGroup['id'],
    'label'           => 'Sales Tax',
    'html_type'       => 'Text',
    'data_type'       => 'String',
    'weight'          => 1,
    'is_required'     => 0,
    'is_searchable'   => 0,
    'is_active'       => 1,
  );
  $taxField = civicrm_custom_field_create($params);
  variable_set('uc_civicrm_sales_tax_field_id', $taxField['result']['customFieldId']);

  $params = array(
    'custom_group_id' => $customGroup['id'],
    'label'           => 'Shipping Cost',
    'html_type'       => 'Text',
    'data_type'       => 'String',
    'weight'          => 2,
    'is_required'     => 0,
    'is_searchable'   => 0,
    'is_active'       => 1,
  );
  $shippingField = civicrm_custom_field_create($params);
  variable_set('uc_civicrm_shipping_cost_field_id', $shippingField['result']['customFieldId']);
}


/**
 * Add a contribution record
 *
 * Create any custom fields and get the transaction id. If it doesn't exist,
 * make one up and add the contribution.
 */
function _uc_civicrm_add_contribution($cid, &$order) {
  _uc_civicrm_create_custom_contribution_fields();

  $payDataAry = uc_payment_load_payments($order->order_id);
  $payDataAry[0]->data = unserialize($payDataAry[0]->data);
  $txnId = isset($payDataAry[0]->data['txn_id']) ?
      $payDataAry[0]->data['txn_id'] : 'TRXN ID NOT AVAILABLE ' . md5($order->order_id);

  // @FIXME Landmine. CiviCRM doesn't seem to accept financial values with
  // precision greater than 2 digits after the decimal.
  $roundedTotal = round($order->order_total * 100) / 100;

  $salesTaxFieldId = 'custom_' . variable_get('uc_civicrm_sales_tax_field_id', '');
  $shippingCostFieldId = 'custom_' . variable_get('uc_civicrm_shipping_cost_field_id', '');
  $taxCost = '';
  $shippingCost = '';

  foreach ($order->line_items as $item) {
    if ($item['type'] == 'tax') { $taxCost = $item['amount']; }
    elseif ($item['type'] == 'shipping') { $shippingCost = $item['amount']; }
  }

  $params = array(
    'contact_id' => $cid,
    'receive_date' => date('Y-m-d H:i:s'),  // Changing to track time in contribution.
    'total_amount' => $roundedTotal,
    'financial_type_id' => variable_get('uc_civicrm_contribution_type', ''), // @FIXME this needs a sensible default
    'payment_instrument' => _uc_civicrm_map_payment_instrument($order->payment_method),
    'non_deductible_amount' => 00.00,
    'fee_amount' => 00.00,
    'net_amount' => $roundedTotal,
    'trxn_id' => $txnId,
    'invoice_id' => $order->order_id . '_uc',
    'source' => _uc_civicrm_create_detail_string($order),
    'contribution_status_id' => _uc_civicrm_map_contribution_status($order->order_status),
    'note' => _uc_civicrm_create_detail_string($order),
    "$salesTaxFieldId" => $taxCost,
    "$shippingCostFieldId" => $shippingCost,
  );

  require_once 'api/v2/Contribute.php';
  $contribution = civicrm_contribution_add($params);

  // Log the error, but continue.
  if (civicrm_error($contribution)) {
    watchdog('uc_civicrm', 'civicrm_contribution_add(): ' . $contribution['error_message'], array(), WATCHDOG_ERROR);
  }

  return TRUE;
}


/**
 * Maps an Ubercart payment method to a CiviCRM payment instrument
 *
 * @param string $paymentDevice
 *    An Ubercart payment device
 * @return int
 *    The CiviCRM id of the payment processor
 */
function _uc_civicrm_map_payment_instrument($paymentDevice) {
  // Note that the payment methods for Ubercart are hardcoded in the payment
  // modules under hook_uc_payment_method(), so anything that's not explicitly a
  // check or cash has to be a credit card.
  $map = array(
    "credit" => 1,
    "cod"    => 3,
    "check"  => 4,
  );
$map = array("credit" => 'Credit Card', "cod" => 'Cash', "check" => 'Check', 'paypal_wps' => "Paypal");
  if (array_key_exists($paymentDevice, $map)) { $id = $map[$paymentDevice]; }
  //else { $id = 1; } // Another Ubercart payment method - good chance this is credit.
  else { $id = 'Credit Card'; }

  return $id;
}


/**
 * Maps an Ubercart order status to a corresponding CiviCRM contribution status
 *
 * @param string $orderStatus
 *    An Ubercart order status
 * @return int
 *    A CiviCRM order status
 */
function _uc_civicrm_map_contribution_status($orderStatus) {
  // NOTE: There may be a more "correct" way to do this.
  $map = array(
    "completed"        => 1,
    "payment_received" => 1,
    "pending"          => 2,
    "processing"       => 5,
    "canceled"         => 3,
    "in_checkout"      => 5,
  );

  if (array_key_exists($orderStatus, $map)) { $id = $map[$orderStatus]; }
  else {
    $id = 1; // Oh no.
    watchdog('uc_civicrm', 'There is no status that maps to ' . $orderStatus . ', marking as "Complete"', array(), WATCHDOG_WARNING);
  }

  return $id;
}


/**
 * Create string to insert for purchase activity details.
 */
function _uc_civicrm_create_detail_string($order) {
  $str = '';
  $n = 1;
  foreach ($order->products as $product) {
    if ($n > 1) { $str .= ', '; }
    $str .= $product->title;
    $n++;
  }

  return $str;
}

/**
 * Displays a list of orders made by a customer. Originally from uc_order.module but added here when it was removed from that module.
 *
 * @see http://drupal.org/node/1567946
 *
 * @param $uid
 *   The user id of the customer.
 */
function _uc_civicrm_customer_orders($uid) {
  $result = db_select('uc_orders')->extend('PagerDefault')
    ->fields('uc_orders')
    ->condition('uid', $uid)
    ->condition('order_status', uc_order_status_list('general', TRUE), 'IN')
    ->orderBy('created', 'DESC')
    ->limit(50)
    ->execute();

  $header = array(t('View'), t('Order ID'), t('Date'), t('Billing name'),
                  t('Shipping name'), t('Items'), t('Total'));
  $rows = array();
  $totals = array('orders' => 0, 'items' => 0, 'total' => 0);
  foreach ($result as $order) {
    $icons = l(uc_store_get_icon('file:order_view'), 'admin/store/orders/' . $order->order_id, array(
      'html' => TRUE,
      'attributes' => array('title' => t("View order !order_id.", array('!order_id' => $order->order_id))),
    ));
    $icons .= l(uc_store_get_icon('file:order_edit'), 'admin/store/orders/' . $order->order_id . '/edit', array(
      'html' => TRUE,
      'attributes' => array('title' => t("Edit order !order_id.", array('!order_id' => $order->order_id))),
    ));
    $bname = drupal_ucfirst($order->billing_first_name) . ' ' . drupal_ucfirst($order->billing_last_name);
    $sname = drupal_ucfirst($order->delivery_first_name) . ' ' . drupal_ucfirst($order->delivery_last_name);
    $item_count = db_query("SELECT COUNT(*) FROM {uc_order_products} WHERE order_id = :order_id", array(':order_id' => $order->order_id))->fetchField();

    $totals['orders'] += 1;
    $totals['items'] += $item_count;
    $totals['total'] += $order->order_total;

    $rows[] = array(
      'data' => array(
        array('data' => $icons),
        array('data' => $order->order_id),
        array('data' => format_date($order->created, 'uc_store')),
        array('data' => check_plain($bname)),
        array('data' => check_plain($sname)),
        array('data' => $item_count['COUNT(*)']),
        array('data' => array('#theme' => 'uc_price', '#price' => $order->order_total)),
      ),
      'id' => 'order-' . $order->order_id,
    );
  }

  $build = array();

  $build['description'] = array(
    '#markup' => '<p>' . t('!totals_orders orders shown match that account with !totals_items items purchased and !totals_total spent:', array(
      '!totals_orders' => $totals['orders'],
      '!totals_items' => $totals['items'],
      '!totals_total' => uc_currency_format($totals['total']),
    )) . '</p>',
    '#weight' => -5,
  );
  $build['orders'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#attributes' => array('width' => '100%', 'class' => array('uc-cust-orders-table')),
    '#empty' => t('No orders found.'),
  );
  $build['pager'] = array(
    '#theme' => 'pager',
    '#weight' => 5,
  );

  return $build;
}
